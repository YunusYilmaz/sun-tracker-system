
C:\Users\MOB\AppData\Local\Temp\arduino_build_93364/mod_blink.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_16>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
  68:	00 00       	nop
  6a:	00 09       	sbc	r16, r0
  6c:	00 03       	mulsu	r16, r16
  6e:	02 00       	.word	0x0002	; ????
  70:	00 04       	cpc	r0, r0
  72:	05 08       	sbc	r0, r5
	...

0000007f <digital_pin_to_bit_mask_PGM>:
  7f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8f:	04 08 10 20 40 80 40                                ... @.@

00000096 <digital_pin_to_port_PGM>:
  96:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a6:	03 03 03 03 02 02 03                                .......

000000ad <port_to_output_PGM>:
  ad:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b7 <port_to_mode_PGM>:
  b7:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000c2 <__ctors_end>:
__dtors_end():
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
  ce:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
  d0:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
  d2:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
  d8:	a9 30       	cpi	r26, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
  da:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
.do_clear_bss_start():
  de:	0e 94 85 02 	call	0x50a	; 0x50a <main>
  e2:	0c 94 95 02 	jmp	0x52a	; 0x52a <_exit>

000000e6 <__bad_interrupt>:
__vector_22():
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <setup>:
setup():
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:28
*/

// the setup function runs once when you press reset or power the board
void setup() {
  // initialize digital pin LED_BUILTIN as an output.
  pinMode(4, OUTPUT);
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	84 e0       	ldi	r24, 0x04	; 4
  ee:	0e 94 1a 02 	call	0x434	; 0x434 <pinMode>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:29
  pinMode(3, OUTPUT);
  f2:	61 e0       	ldi	r22, 0x01	; 1
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	0e 94 1a 02 	call	0x434	; 0x434 <pinMode>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:30
  pinMode(11, OUTPUT);
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	8b e0       	ldi	r24, 0x0B	; 11
  fe:	0e 94 1a 02 	call	0x434	; 0x434 <pinMode>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:31
  pinMode(13, OUTPUT);
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	8d e0       	ldi	r24, 0x0D	; 13
 106:	0e 94 1a 02 	call	0x434	; 0x434 <pinMode>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:32
  pinMode(0, OUTPUT);
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	0e 94 1a 02 	call	0x434	; 0x434 <pinMode>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:33
  pinMode(1, OUTPUT);
 112:	61 e0       	ldi	r22, 0x01	; 1
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 1a 02 	call	0x434	; 0x434 <pinMode>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:34
  digitalWrite(0, HIGH);
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 56 02 	call	0x4ac	; 0x4ac <digitalWrite>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:35
  digitalWrite(1, HIGH);
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <digitalWrite>

0000012a <loop>:
loop():
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:40
}

// the loop function runs over and over again forever
void loop() {
  digitalWrite(4, HIGH);   // turn the LED on (HIGH is the voltage level)
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	84 e0       	ldi	r24, 0x04	; 4
 12e:	0e 94 56 02 	call	0x4ac	; 0x4ac <digitalWrite>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:41
  delay(500);                       // wait for a second
 132:	64 ef       	ldi	r22, 0xF4	; 244
 134:	71 e0       	ldi	r23, 0x01	; 1
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 90 01 	call	0x320	; 0x320 <delay>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:42
  digitalWrite(4, LOW);    // turn the LED off by making the voltage LOW
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	84 e0       	ldi	r24, 0x04	; 4
 142:	0e 94 56 02 	call	0x4ac	; 0x4ac <digitalWrite>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:43
  delay(500);        
 146:	64 ef       	ldi	r22, 0xF4	; 244
 148:	71 e0       	ldi	r23, 0x01	; 1
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 90 01 	call	0x320	; 0x320 <delay>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:44
  digitalWrite(3, HIGH);   // turn the LED on (HIGH is the voltage level)
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	0e 94 56 02 	call	0x4ac	; 0x4ac <digitalWrite>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:45
  delay(400);
 15a:	60 e9       	ldi	r22, 0x90	; 144
 15c:	71 e0       	ldi	r23, 0x01	; 1
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 90 01 	call	0x320	; 0x320 <delay>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:47
  
  digitalWrite(4, HIGH);    // turn the LED off by making the voltage LOW
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	84 e0       	ldi	r24, 0x04	; 4
 16a:	0e 94 56 02 	call	0x4ac	; 0x4ac <digitalWrite>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:48
  delay(500);  // wait for a second
 16e:	64 ef       	ldi	r22, 0xF4	; 244
 170:	71 e0       	ldi	r23, 0x01	; 1
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 90 01 	call	0x320	; 0x320 <delay>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:49
  digitalWrite(4, LOW);    // turn the LED off by making the voltage LOW
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	84 e0       	ldi	r24, 0x04	; 4
 17e:	0e 94 56 02 	call	0x4ac	; 0x4ac <digitalWrite>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:50
  delay(400);  // wait for a second
 182:	60 e9       	ldi	r22, 0x90	; 144
 184:	71 e0       	ldi	r23, 0x01	; 1
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 90 01 	call	0x320	; 0x320 <delay>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:51
  digitalWrite(3, LOW);    // turn the LED off by making the voltage LOW
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	83 e0       	ldi	r24, 0x03	; 3
 192:	0e 94 56 02 	call	0x4ac	; 0x4ac <digitalWrite>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:52
  delay(500);  
 196:	64 ef       	ldi	r22, 0xF4	; 244
 198:	71 e0       	ldi	r23, 0x01	; 1
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 90 01 	call	0x320	; 0x320 <delay>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:54
  
    digitalWrite(0, LOW);   // turn the LED on (HIGH is the voltage level)
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 56 02 	call	0x4ac	; 0x4ac <digitalWrite>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:55
  delay(200);                       // wait for a second
 1aa:	68 ec       	ldi	r22, 0xC8	; 200
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 90 01 	call	0x320	; 0x320 <delay>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:56
  digitalWrite(0, HIGH);    // turn the LED off by making the voltage LOW
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 56 02 	call	0x4ac	; 0x4ac <digitalWrite>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:57
  delay(200);   
 1be:	68 ec       	ldi	r22, 0xC8	; 200
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 90 01 	call	0x320	; 0x320 <delay>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:58
    digitalWrite(1, LOW);   // turn the LED on (HIGH is the voltage level)
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 56 02 	call	0x4ac	; 0x4ac <digitalWrite>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:59
  delay(200);                       // wait for a second
 1d2:	68 ec       	ldi	r22, 0xC8	; 200
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 90 01 	call	0x320	; 0x320 <delay>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:60
  digitalWrite(1, HIGH);    // turn the LED off by making the voltage LOW
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 56 02 	call	0x4ac	; 0x4ac <digitalWrite>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:61
  delay(200);
 1e6:	68 ec       	ldi	r22, 0xC8	; 200
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 90 01 	call	0x320	; 0x320 <delay>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:63
  
    digitalWrite(11, HIGH);   // turn the LED on (HIGH is the voltage level)
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	8b e0       	ldi	r24, 0x0B	; 11
 1f6:	0e 94 56 02 	call	0x4ac	; 0x4ac <digitalWrite>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:64
  delay(200);                       // wait for a second
 1fa:	68 ec       	ldi	r22, 0xC8	; 200
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 90 01 	call	0x320	; 0x320 <delay>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:65
  digitalWrite(11, LOW);    // turn the LED off by making the voltage LOW
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	8b e0       	ldi	r24, 0x0B	; 11
 20a:	0e 94 56 02 	call	0x4ac	; 0x4ac <digitalWrite>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:66
  delay(200);   
 20e:	68 ec       	ldi	r22, 0xC8	; 200
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 90 01 	call	0x320	; 0x320 <delay>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:67
    digitalWrite(13, HIGH);   // turn the LED on (HIGH is the voltage level)
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	8d e0       	ldi	r24, 0x0D	; 13
 21e:	0e 94 56 02 	call	0x4ac	; 0x4ac <digitalWrite>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:68
  delay(200);                       // wait for a second
 222:	68 ec       	ldi	r22, 0xC8	; 200
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 90 01 	call	0x320	; 0x320 <delay>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:69
  digitalWrite(13, LOW);    // turn the LED off by making the voltage LOW
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	8d e0       	ldi	r24, 0x0D	; 13
 232:	0e 94 56 02 	call	0x4ac	; 0x4ac <digitalWrite>
C:\Users\MOB\Desktop\modd\mod_blink/mod_blink.ino:70
  delay(200) ;
 236:	68 ec       	ldi	r22, 0xC8	; 200
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0c 94 90 01 	jmp	0x320	; 0x320 <delay>

00000242 <__vector_16>:
__vector_16():
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	2f 93       	push	r18
 24e:	3f 93       	push	r19
 250:	8f 93       	push	r24
 252:	9f 93       	push	r25
 254:	af 93       	push	r26
 256:	bf 93       	push	r27
 258:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_millis>
 25c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_millis+0x1>
 260:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_millis+0x2>
 264:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_millis+0x3>
 268:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <timer0_fract>
 26c:	23 e0       	ldi	r18, 0x03	; 3
 26e:	23 0f       	add	r18, r19
 270:	2d 37       	cpi	r18, 0x7D	; 125
 272:	68 f1       	brcs	.+90     	; 0x2ce <__vector_16+0x8c>
 274:	26 e8       	ldi	r18, 0x86	; 134
 276:	23 0f       	add	r18, r19
 278:	02 96       	adiw	r24, 0x02	; 2
 27a:	a1 1d       	adc	r26, r1
 27c:	b1 1d       	adc	r27, r1
 27e:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <timer0_fract>
 282:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer0_millis>
 286:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer0_millis+0x1>
 28a:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer0_millis+0x2>
 28e:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer0_millis+0x3>
 292:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 296:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 29a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 29e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 2a2:	01 96       	adiw	r24, 0x01	; 1
 2a4:	a1 1d       	adc	r26, r1
 2a6:	b1 1d       	adc	r27, r1
 2a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 2ac:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 2b0:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 2b4:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
 2b8:	bf 91       	pop	r27
 2ba:	af 91       	pop	r26
 2bc:	9f 91       	pop	r25
 2be:	8f 91       	pop	r24
 2c0:	3f 91       	pop	r19
 2c2:	2f 91       	pop	r18
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	a1 1d       	adc	r26, r1
 2d2:	b1 1d       	adc	r27, r1
 2d4:	d4 cf       	rjmp	.-88     	; 0x27e <__vector_16+0x3c>

000002d6 <micros>:
micros():
 2d6:	3f b7       	in	r19, 0x3f	; 63
 2d8:	f8 94       	cli
 2da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2e2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 2e6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 2ea:	26 b5       	in	r18, 0x26	; 38
 2ec:	a8 9b       	sbis	0x15, 0	; 21
 2ee:	05 c0       	rjmp	.+10     	; 0x2fa <micros+0x24>
 2f0:	2f 3f       	cpi	r18, 0xFF	; 255
 2f2:	19 f0       	breq	.+6      	; 0x2fa <micros+0x24>
 2f4:	01 96       	adiw	r24, 0x01	; 1
 2f6:	a1 1d       	adc	r26, r1
 2f8:	b1 1d       	adc	r27, r1
 2fa:	3f bf       	out	0x3f, r19	; 63
 2fc:	ba 2f       	mov	r27, r26
 2fe:	a9 2f       	mov	r26, r25
 300:	98 2f       	mov	r25, r24
 302:	88 27       	eor	r24, r24
 304:	bc 01       	movw	r22, r24
 306:	cd 01       	movw	r24, r26
 308:	62 0f       	add	r22, r18
 30a:	71 1d       	adc	r23, r1
 30c:	81 1d       	adc	r24, r1
 30e:	91 1d       	adc	r25, r1
 310:	42 e0       	ldi	r20, 0x02	; 2
 312:	66 0f       	add	r22, r22
 314:	77 1f       	adc	r23, r23
 316:	88 1f       	adc	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	4a 95       	dec	r20
 31c:	d1 f7       	brne	.-12     	; 0x312 <micros+0x3c>
 31e:	08 95       	ret

00000320 <delay>:
delay():
 320:	8f 92       	push	r8
 322:	9f 92       	push	r9
 324:	af 92       	push	r10
 326:	bf 92       	push	r11
 328:	cf 92       	push	r12
 32a:	df 92       	push	r13
 32c:	ef 92       	push	r14
 32e:	ff 92       	push	r15
 330:	6b 01       	movw	r12, r22
 332:	7c 01       	movw	r14, r24
 334:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <micros>
 338:	4b 01       	movw	r8, r22
 33a:	5c 01       	movw	r10, r24
 33c:	c1 14       	cp	r12, r1
 33e:	d1 04       	cpc	r13, r1
 340:	e1 04       	cpc	r14, r1
 342:	f1 04       	cpc	r15, r1
 344:	e9 f0       	breq	.+58     	; 0x380 <delay+0x60>
 346:	0e 94 94 02 	call	0x528	; 0x528 <yield>
 34a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <micros>
 34e:	68 19       	sub	r22, r8
 350:	79 09       	sbc	r23, r9
 352:	8a 09       	sbc	r24, r10
 354:	9b 09       	sbc	r25, r11
 356:	68 3e       	cpi	r22, 0xE8	; 232
 358:	73 40       	sbci	r23, 0x03	; 3
 35a:	81 05       	cpc	r24, r1
 35c:	91 05       	cpc	r25, r1
 35e:	70 f3       	brcs	.-36     	; 0x33c <delay+0x1c>
 360:	21 e0       	ldi	r18, 0x01	; 1
 362:	c2 1a       	sub	r12, r18
 364:	d1 08       	sbc	r13, r1
 366:	e1 08       	sbc	r14, r1
 368:	f1 08       	sbc	r15, r1
 36a:	88 ee       	ldi	r24, 0xE8	; 232
 36c:	88 0e       	add	r8, r24
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	98 1e       	adc	r9, r24
 372:	a1 1c       	adc	r10, r1
 374:	b1 1c       	adc	r11, r1
 376:	c1 14       	cp	r12, r1
 378:	d1 04       	cpc	r13, r1
 37a:	e1 04       	cpc	r14, r1
 37c:	f1 04       	cpc	r15, r1
 37e:	29 f7       	brne	.-54     	; 0x34a <delay+0x2a>
 380:	ff 90       	pop	r15
 382:	ef 90       	pop	r14
 384:	df 90       	pop	r13
 386:	cf 90       	pop	r12
 388:	bf 90       	pop	r11
 38a:	af 90       	pop	r10
 38c:	9f 90       	pop	r9
 38e:	8f 90       	pop	r8
 390:	08 95       	ret

00000392 <init>:
init():
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
 392:	78 94       	sei
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
 394:	84 b5       	in	r24, 0x24	; 36
 396:	83 60       	ori	r24, 0x03	; 3
 398:	84 bd       	out	0x24, r24	; 36
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
 39a:	85 b5       	in	r24, 0x25	; 37
 39c:	83 60       	ori	r24, 0x03	; 3
 39e:	85 bd       	out	0x25, r24	; 37
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
 3a0:	ee e6       	ldi	r30, 0x6E	; 110
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	81 60       	ori	r24, 0x01	; 1
 3a8:	80 83       	st	Z, r24
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
 3aa:	e1 e8       	ldi	r30, 0x81	; 129
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	82 e0       	ldi	r24, 0x02	; 2
 3b0:	80 83       	st	Z, r24
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
 3b2:	80 81       	ld	r24, Z
 3b4:	81 60       	ori	r24, 0x01	; 1
 3b6:	80 83       	st	Z, r24
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
 3b8:	e0 e8       	ldi	r30, 0x80	; 128
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	81 60       	ori	r24, 0x01	; 1
 3c0:	80 83       	st	Z, r24
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
 3c2:	e1 eb       	ldi	r30, 0xB1	; 177
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	84 60       	ori	r24, 0x04	; 4
 3ca:	80 83       	st	Z, r24
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
 3cc:	e0 eb       	ldi	r30, 0xB0	; 176
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	80 81       	ld	r24, Z
 3d2:	81 60       	ori	r24, 0x01	; 1
 3d4:	80 83       	st	Z, r24
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
 3d6:	87 e8       	ldi	r24, 0x87	; 135
 3d8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
 3dc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
 3e0:	08 95       	ret

000003e2 <turnOffPWM>:
turnOffPWM():
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
 3e2:	84 30       	cpi	r24, 0x04	; 4
 3e4:	81 f0       	breq	.+32     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3e6:	28 f4       	brcc	.+10     	; 0x3f2 <turnOffPWM+0x10>
 3e8:	82 30       	cpi	r24, 0x02	; 2
 3ea:	e9 f0       	breq	.+58     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3ec:	83 30       	cpi	r24, 0x03	; 3
 3ee:	f9 f0       	breq	.+62     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3f0:	08 95       	ret
 3f2:	88 30       	cpi	r24, 0x08	; 8
 3f4:	71 f0       	breq	.+28     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3f6:	89 30       	cpi	r24, 0x09	; 9
 3f8:	91 f0       	breq	.+36     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3fa:	85 30       	cpi	r24, 0x05	; 5
 3fc:	b9 f4       	brne	.+46     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
 3fe:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 402:	8f 7d       	andi	r24, 0xDF	; 223
 404:	03 c0       	rjmp	.+6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
 406:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 40a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
 40c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
 410:	08 95       	ret
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
 412:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 416:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
 418:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
 41c:	08 95       	ret
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
 41e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 422:	8f 7d       	andi	r24, 0xDF	; 223
 424:	f9 cf       	rjmp	.-14     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
 426:	84 b5       	in	r24, 0x24	; 36
 428:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
 42a:	84 bd       	out	0x24, r24	; 36
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
 42c:	08 95       	ret
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
 42e:	84 b5       	in	r24, 0x24	; 36
 430:	8f 7d       	andi	r24, 0xDF	; 223
 432:	fb cf       	rjmp	.-10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>

00000434 <pinMode>:
pinMode():
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	fc 01       	movw	r30, r24
 43c:	e1 58       	subi	r30, 0x81	; 129
 43e:	ff 4f       	sbci	r31, 0xFF	; 255
 440:	24 91       	lpm	r18, Z
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
 442:	8a 56       	subi	r24, 0x6A	; 106
 444:	9f 4f       	sbci	r25, 0xFF	; 255
 446:	fc 01       	movw	r30, r24
 448:	84 91       	lpm	r24, Z
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
 44a:	88 23       	and	r24, r24
 44c:	c9 f0       	breq	.+50     	; 0x480 <pinMode+0x4c>
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	fc 01       	movw	r30, r24
 456:	e9 54       	subi	r30, 0x49	; 73
 458:	ff 4f       	sbci	r31, 0xFF	; 255
 45a:	a5 91       	lpm	r26, Z+
 45c:	b4 91       	lpm	r27, Z
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
 45e:	fc 01       	movw	r30, r24
 460:	e3 55       	subi	r30, 0x53	; 83
 462:	ff 4f       	sbci	r31, 0xFF	; 255
 464:	c5 91       	lpm	r28, Z+
 466:	d4 91       	lpm	r29, Z
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
 468:	61 11       	cpse	r22, r1
 46a:	0d c0       	rjmp	.+26     	; 0x486 <pinMode+0x52>
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
 46c:	9f b7       	in	r25, 0x3f	; 63
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
 46e:	f8 94       	cli
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
 470:	8c 91       	ld	r24, X
 472:	20 95       	com	r18
 474:	82 23       	and	r24, r18
 476:	8c 93       	st	X, r24
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
 478:	88 81       	ld	r24, Y
 47a:	28 23       	and	r18, r24
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
 47c:	28 83       	st	Y, r18
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
 47e:	9f bf       	out	0x3f, r25	; 63
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	08 95       	ret
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
 486:	62 30       	cpi	r22, 0x02	; 2
 488:	51 f4       	brne	.+20     	; 0x49e <pinMode+0x6a>
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
 48a:	9f b7       	in	r25, 0x3f	; 63
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
 48c:	f8 94       	cli
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
 48e:	3c 91       	ld	r19, X
 490:	82 2f       	mov	r24, r18
 492:	80 95       	com	r24
 494:	83 23       	and	r24, r19
 496:	8c 93       	st	X, r24
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
 498:	e8 81       	ld	r30, Y
 49a:	2e 2b       	or	r18, r30
 49c:	ef cf       	rjmp	.-34     	; 0x47c <pinMode+0x48>
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
 49e:	8f b7       	in	r24, 0x3f	; 63
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
 4a0:	f8 94       	cli
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
 4a2:	ec 91       	ld	r30, X
 4a4:	2e 2b       	or	r18, r30
 4a6:	2c 93       	st	X, r18
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
 4a8:	8f bf       	out	0x3f, r24	; 63
 4aa:	ea cf       	rjmp	.-44     	; 0x480 <pinMode+0x4c>

000004ac <digitalWrite>:
digitalWrite():
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 4ac:	1f 93       	push	r17
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
 4b2:	28 2f       	mov	r18, r24
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	f9 01       	movw	r30, r18
 4b8:	e8 59       	subi	r30, 0x98	; 152
 4ba:	ff 4f       	sbci	r31, 0xFF	; 255
 4bc:	84 91       	lpm	r24, Z
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
 4be:	f9 01       	movw	r30, r18
 4c0:	e1 58       	subi	r30, 0x81	; 129
 4c2:	ff 4f       	sbci	r31, 0xFF	; 255
 4c4:	d4 91       	lpm	r29, Z
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
 4c6:	f9 01       	movw	r30, r18
 4c8:	ea 56       	subi	r30, 0x6A	; 106
 4ca:	ff 4f       	sbci	r31, 0xFF	; 255
 4cc:	c4 91       	lpm	r28, Z
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
 4ce:	cc 23       	and	r28, r28
 4d0:	a9 f0       	breq	.+42     	; 0x4fc <digitalWrite+0x50>
 4d2:	16 2f       	mov	r17, r22
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 4d4:	81 11       	cpse	r24, r1
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
 4d6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <turnOffPWM>
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
 4da:	ec 2f       	mov	r30, r28
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	ee 0f       	add	r30, r30
 4e0:	ff 1f       	adc	r31, r31
 4e2:	e3 55       	subi	r30, 0x53	; 83
 4e4:	ff 4f       	sbci	r31, 0xFF	; 255
 4e6:	a5 91       	lpm	r26, Z+
 4e8:	b4 91       	lpm	r27, Z
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
 4ea:	8f b7       	in	r24, 0x3f	; 63
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
 4ec:	f8 94       	cli
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
 4ee:	ec 91       	ld	r30, X
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
 4f0:	11 11       	cpse	r17, r1
 4f2:	08 c0       	rjmp	.+16     	; 0x504 <digitalWrite+0x58>
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
 4f4:	d0 95       	com	r29
 4f6:	de 23       	and	r29, r30
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
 4f8:	dc 93       	st	X, r29
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
 4fa:	8f bf       	out	0x3f, r24	; 63
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:212
}
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	1f 91       	pop	r17
 502:	08 95       	ret
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
 504:	de 2b       	or	r29, r30
 506:	f8 cf       	rjmp	.-16     	; 0x4f8 <digitalWrite+0x4c>

00000508 <initVariant>:
initVariant():
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 508:	08 95       	ret

0000050a <main>:
main():
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
 50a:	0e 94 c9 01 	call	0x392	; 0x392 <init>
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
 50e:	0e 94 84 02 	call	0x508	; 0x508 <initVariant>
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
 512:	0e 94 75 00 	call	0xea	; 0xea <setup>
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
 516:	c0 e0       	ldi	r28, 0x00	; 0
 518:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
 51a:	0e 94 95 00 	call	0x12a	; 0x12a <loop>
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
 51e:	20 97       	sbiw	r28, 0x00	; 0
 520:	e1 f3       	breq	.-8      	; 0x51a <main+0x10>
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
 522:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 526:	f9 cf       	rjmp	.-14     	; 0x51a <main+0x10>

00000528 <yield>:
__empty():
C:\Users\MOB\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
 528:	08 95       	ret

0000052a <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 52a:	f8 94       	cli

0000052c <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 52c:	ff cf       	rjmp	.-2      	; 0x52c <__stop_program>
